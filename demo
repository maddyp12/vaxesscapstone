# Demo
# 02May2024
# Author: Shanni Zhou

import serial
import csv
import time
import os
import matplotlib.pyplot as plt
from scipy.signal import find_peaks
import numpy as np
import pandas as pd
import sys


def clear_serial_buffer(serial_port):
    while serial_port.in_waiting > 0:
        serial_port.read()

def conversion(x):
    return x * (5.0 / 4096) * 1000

teensy = serial.Serial('COM5', 9600)   # Set port to COM5

# Set time
duration = 5
start_time = time.time()
end_time = start_time + duration
i = 0

# Create/Open CSV file
testNum = 17 # CHANGE THIS
filename = "C:\\Users\\Shanni Zhou\\Desktop\\Capstone Codes\\.venv\\Demo\\" + "demo" + ".csv"

if os.path.exists(filename):
    print('Already exists. Please try again')
else:
    with open(filename, 'w') as csvfile:
        writer = csv.writer(csvfile)
        print("Collecting data...")
        try:
            # Continuous sensor reading
            while time.time() < end_time:
                pzt_data = teensy.readline().decode().strip()
                # pzt_data = arduino.read(12).decode().strip()
                # print(pzt_data)
                values = pzt_data.split(',')
                writer.writerow([i, pzt_data])
                i += 1
        except KeyboardInterrupt:
            print ("Collection terminated")


df = pd.read_csv(filename, header=None)
df.iloc[:, 1] = df.iloc[:, 1].apply(conversion)

header_names = ['Time', 'Volts']
df.columns = header_names

df.to_csv(filename, index=False)

raw_data = pd.read_csv(filename)
data = raw_data["Volts"].values
presignal = np.delete(data, 1, 0)
signal = presignal.flatten()

# creating the appropriate time vector
signal_len = 0
signal_len = raw_data["Time"].iloc[-1]
fs = 1000.0  # Sampling frequency (Hz)
duration = signal_len / fs  # Duration of the signal (seconds)
time = np.linspace(0, duration, int(fs*duration))  # Time vector

# Find peaks and troughs in the filtered signal

peaks, _ = find_peaks(signal, height= 0.02, distance= 300)
troughs, _ = find_peaks(-signal, height=0, distance= 100)
avg_mag= np.mean(signal[peaks])
print(avg_mag)

plt.figure(figsize=(18, 6))
plt.plot(time, signal, label='PZT Signal')
plt.plot(time[peaks], signal[peaks], 'ro', label='Peaks')
plt.plot(time[troughs], signal[troughs], 'go', label='Troughs')
plt.xlabel('Time (s)', fontsize=16)
plt.ylabel('Amplitude (mV)', fontsize=16)
plt.legend(loc='upper right')
plt.show()

os.remove(filename)
print(f"File '{filename}' deleted successfully.")